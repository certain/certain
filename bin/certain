#!/usr/bin/python

"""Certificate Management System

This program provides the configuration and daemon functions of certain.
It is intended to be run as a daemon. It provides a network service for
clients to have a certificate issued (automatically, if they have a nearly-
expired certificate or if this is desired always). It provides a second
network service which is needed to atomically generate serial numbers for
certificates.

Additionally, it provides administrator functions to initialise the
certificate authority and to approve certificate signing requests.

It provides a method to update the cache of the central store. This should be
used by programs or scripts which know they need up to date certificates.

"""

from __future__ import absolute_import
import certain
import certain.daemon
import os
from optparse import OptionParser
import sys
import pwd

if sys.hexversion < 0x02060000:
    print >>sys.stderr, "Error: Python 2.6 or greater required."
    sys.exit(1)


def main():
    parser = OptionParser()
    parser.add_option("-c", "--config",
                      dest="config_file",
                      help="Specifies the config file to use. "
                      "If unset, defaults to /etc/certain/certain.cfg")
    parser.add_option("-m", "--makecert",
                      action="store_true", dest="makecert",
                      help="Setup a certificate and key on this system.")
    parser.add_option("-s", "--sign",
                      action="store_true", dest="sign",
                      help="View and sign queued CSRs.")
    parser.add_option("-g", "--get",
                      action="store_true", dest="get",
                      help="Update certificates from the central store.")
    parser.add_option("-d", "--daemon",
                      action="store_true", dest="daemon",
                      help="Start Certain daemon.")
    parser.add_option("-p", "--pid-file",
                      dest="pidfile",
                      help="Specify an alternate PID file.",
                      default="/var/run/certain/certain.pid")

    options, args = parser.parse_args()

    if options.config_file:
        certain.parse_config(options.config_file)

    certain.check_paths()

    if options.makecert:
        certain.make_cert()

    if options.daemon:
        if (os.getuid() == 0):
            # We don't want to run as root - time to drop privs
            # If we're running as non-root, assume we're already
            # running as a suitable account and do nothing.
            uid, gid = pwd.getpwnam('certain')[2:4]
            os.setgid(gid)
            os.setuid(uid)
        if certain.config.get('global', 'LogLevel') != 'DEBUG':
            certain.daemon.create_daemon()
        with certain.pidfile(options.pidfile):
            certain.launch_daemon()

    if options.sign:
        with certain.StoreHandler.dispatch(
                certain.config.get('store', 'StoreType')) as store:
            for csr in certain.pending_csrs():
                if not csr.csr:
                    dosign = raw_input(
                            "%s is not a CSR. Delete? [N/d]" % csr.csr_file
                        ).strip().lower()
                else:
                    dosign = raw_input(
                            "Sign CSR: %s (CN=%s) [N/y/d(elete)]? " % (
                                os.path.basename(csr.csr_filename),
                                csr.csr.get_subject().CN)
                        ).strip().lower()
                if csr.csr and dosign == 'y':
                    csr.store(store=store)
                elif dosign == 'd':
                    csr.remove()

    if options.get:
        with certain.StoreHandler.dispatch(
                certain.config.get('store', 'StoreType')) as store:
            store.fetch()

    if not any([options.makecert, options.daemon, options.sign, options.get]):
        parser.error("Must specify one of -m, -d, -s, -g or -h (--help)")

if __name__ == "__main__":
    main()
